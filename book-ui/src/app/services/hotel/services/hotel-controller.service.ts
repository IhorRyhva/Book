/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createHotel } from '../fn/hotel-controller/create-hotel';
import { CreateHotel$Params } from '../fn/hotel-controller/create-hotel';
import { getAllHotels } from '../fn/hotel-controller/get-all-hotels';
import { GetAllHotels$Params } from '../fn/hotel-controller/get-all-hotels';
import { getAllHotelsRooms } from '../fn/hotel-controller/get-all-hotels-rooms';
import { GetAllHotelsRooms$Params } from '../fn/hotel-controller/get-all-hotels-rooms';
import { getHotelByName } from '../fn/hotel-controller/get-hotel-by-name';
import { GetHotelByName$Params } from '../fn/hotel-controller/get-hotel-by-name';
import { getHotelsByLocation } from '../fn/hotel-controller/get-hotels-by-location';
import { GetHotelsByLocation$Params } from '../fn/hotel-controller/get-hotels-by-location';
import { getRoom } from '../fn/hotel-controller/get-room';
import { GetRoom$Params } from '../fn/hotel-controller/get-room';
import { HotelResponse } from '../models/hotel-response';
import { RoomResponse } from '../models/room-response';

@Injectable({ providedIn: 'root' })
export class HotelControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createHotel()` */
  static readonly CreateHotelPath = '/hotels/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createHotel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createHotel$Response(params: CreateHotel$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createHotel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createHotel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createHotel(params: CreateHotel$Params, context?: HttpContext): Observable<number> {
    return this.createHotel$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getHotelByName()` */
  static readonly GetHotelByNamePath = '/hotels/{hotel}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHotelByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHotelByName$Response(params: GetHotelByName$Params, context?: HttpContext): Observable<StrictHttpResponse<HotelResponse>> {
    return getHotelByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHotelByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHotelByName(params: GetHotelByName$Params, context?: HttpContext): Observable<HotelResponse> {
    return this.getHotelByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<HotelResponse>): HotelResponse => r.body)
    );
  }

  /** Path part for operation `getRoom()` */
  static readonly GetRoomPath = '/hotels/{hotel-name}/rooms/{number}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoom$Response(params: GetRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomResponse>> {
    return getRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoom(params: GetRoom$Params, context?: HttpContext): Observable<RoomResponse> {
    return this.getRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomResponse>): RoomResponse => r.body)
    );
  }

  /** Path part for operation `getAllHotelsRooms()` */
  static readonly GetAllHotelsRoomsPath = '/hotels/rooms';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllHotelsRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHotelsRooms$Response(params: GetAllHotelsRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomResponse>>> {
    return getAllHotelsRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllHotelsRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHotelsRooms(params: GetAllHotelsRooms$Params, context?: HttpContext): Observable<Array<RoomResponse>> {
    return this.getAllHotelsRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomResponse>>): Array<RoomResponse> => r.body)
    );
  }

  /** Path part for operation `getHotelsByLocation()` */
  static readonly GetHotelsByLocationPath = '/hotels/location';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHotelsByLocation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHotelsByLocation$Response(params: GetHotelsByLocation$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HotelResponse>>> {
    return getHotelsByLocation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHotelsByLocation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHotelsByLocation(params: GetHotelsByLocation$Params, context?: HttpContext): Observable<Array<HotelResponse>> {
    return this.getHotelsByLocation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HotelResponse>>): Array<HotelResponse> => r.body)
    );
  }

  /** Path part for operation `getAllHotels()` */
  static readonly GetAllHotelsPath = '/hotels/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllHotels()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHotels$Response(params?: GetAllHotels$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HotelResponse>>> {
    return getAllHotels(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllHotels$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllHotels(params?: GetAllHotels$Params, context?: HttpContext): Observable<Array<HotelResponse>> {
    return this.getAllHotels$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HotelResponse>>): Array<HotelResponse> => r.body)
    );
  }

}
