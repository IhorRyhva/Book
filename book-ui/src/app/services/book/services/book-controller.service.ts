/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BookResponse } from '../models/book-response';
import { createBook } from '../fn/book-controller/create-book';
import { CreateBook$Params } from '../fn/book-controller/create-book';
import { delete$ } from '../fn/book-controller/delete';
import { Delete$Params } from '../fn/book-controller/delete';
import { getAll } from '../fn/book-controller/get-all';
import { GetAll$Params } from '../fn/book-controller/get-all';
import { getAllBookForRoom } from '../fn/book-controller/get-all-book-for-room';
import { GetAllBookForRoom$Params } from '../fn/book-controller/get-all-book-for-room';
import { getById } from '../fn/book-controller/get-by-id';
import { GetById$Params } from '../fn/book-controller/get-by-id';
import { getListOfBooks } from '../fn/book-controller/get-list-of-books';
import { GetListOfBooks$Params } from '../fn/book-controller/get-list-of-books';
import { HotelResponse } from '../models/hotel-response';
import { ListOfBooksResponse } from '../models/list-of-books-response';
import { searchFree } from '../fn/book-controller/search-free';
import { SearchFree$Params } from '../fn/book-controller/search-free';

@Injectable({ providedIn: 'root' })
export class BookControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `searchFree()` */
  static readonly SearchFreePath = '/books/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchFree()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchFree$Response(params: SearchFree$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HotelResponse>>> {
    return searchFree(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchFree$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchFree(params: SearchFree$Params, context?: HttpContext): Observable<Array<HotelResponse>> {
    return this.searchFree$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HotelResponse>>): Array<HotelResponse> => r.body)
    );
  }

  /** Path part for operation `createBook()` */
  static readonly CreateBookPath = '/books/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook$Response(params: CreateBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return createBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook(params: CreateBook$Params, context?: HttpContext): Observable<BookResponse> {
    return this.createBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/books/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<BookResponse> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `getListOfBooks()` */
  static readonly GetListOfBooksPath = '/books/list/getMyBooking';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getListOfBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListOfBooks$Response(params?: GetListOfBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ListOfBooksResponse>>> {
    return getListOfBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getListOfBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListOfBooks(params?: GetListOfBooks$Params, context?: HttpContext): Observable<Array<ListOfBooksResponse>> {
    return this.getListOfBooks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ListOfBooksResponse>>): Array<ListOfBooksResponse> => r.body)
    );
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/books/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookResponse>>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<Array<BookResponse>> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookResponse>>): Array<BookResponse> => r.body)
    );
  }

  /** Path part for operation `getAllBookForRoom()` */
  static readonly GetAllBookForRoomPath = '/books/all/{room-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBookForRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBookForRoom$Response(params: GetAllBookForRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookResponse>>> {
    return getAllBookForRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBookForRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBookForRoom(params: GetAllBookForRoom$Params, context?: HttpContext): Observable<Array<BookResponse>> {
    return this.getAllBookForRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookResponse>>): Array<BookResponse> => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/books/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
